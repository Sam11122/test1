{"version":3,"sources":["serviceWorker.js","components/navbar.jsx","components/App1.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","react_default","a","createElement","className","this","props","output","Component","App1","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","console","log","target","value","i","Number","setState","input","handleIncrement","state","isInteger","alert","handleDecrement","_this2","navbar","type","onChange","onClick","ReactDOM","render","components_App1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCHSC,mLAZX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,WACWC,KAAKC,MAAMC,iBANXC,aC2DNC,cAxDb,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,KAKRU,aAAe,SAAAC,GACbC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,IAAIC,EAAIC,OAAON,EAAMG,OAAOC,OAE5BX,EAAKc,SAAS,CAAEC,MAAOH,KAVNZ,EAanBgB,gBAAkB,WAChB,IAAIJ,EAAIC,OAAOb,EAAKiB,MAAMpB,OAASG,EAAKiB,MAAMF,OAC1CF,OAAOK,UAAUN,GACnBZ,EAAKc,SAAS,CAAEjB,OAAQe,IAExBO,MAAM,uBAlBSnB,EAsBnBoB,gBAAkB,WAChB,IAAIR,EAAIC,OAAOb,EAAKiB,MAAMpB,OAASG,EAAKiB,MAAMF,OAC1CF,OAAOK,UAAUN,GACnBZ,EAAKc,SAAS,CAAEjB,OAAQe,IAExBO,MAAM,uBAxBRnB,EAAKiB,MAAQ,CAAEF,MAAO,EAAGlB,OAAQ,GAHhBG,wEA8BV,IAAAqB,EAAA1B,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAD,CAAQzB,OAAQF,KAAKsB,MAAMpB,SAC3BN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,sBACAH,EAAAC,EAAAC,cAAA,SACE8B,KAAK,OACLC,SAAU,SAAAjB,GACRc,EAAKf,aAAaC,MAItBhB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsB+B,QAAS9B,KAAKqB,iBAAtD,aAGAzB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqB+B,QAAS9B,KAAKyB,iBAArD,qBAjDWtB,mBCInB4B,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAUC,SAASC,eAAe,SH0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2744996.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <span className=\"navbar-brand mb-0 h1\">\r\n            Output= {this.props.output}\r\n          </span>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./navbar\";\r\n\r\nclass App1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { input: 0, output: 0 };\r\n  }\r\n\r\n  handleChange = event => {\r\n    console.log(event.target.value);\r\n    let i = Number(event.target.value);\r\n\r\n    this.setState({ input: i });\r\n  };\r\n\r\n  handleIncrement = () => {\r\n    let i = Number(this.state.output + this.state.input);\r\n    if (Number.isInteger(i)) {\r\n      this.setState({ output: i });\r\n    } else {\r\n      alert(\"Input is in  valid\");\r\n    }\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    let i = Number(this.state.output - this.state.input);\r\n    if (Number.isInteger(i)) {\r\n      this.setState({ output: i });\r\n    } else {\r\n      alert(\"Input is not valid\");\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar output={this.state.output} />\r\n        <br />\r\n        <span className=\"badge badge-primary\">Enter an integer: </span>\r\n        <input\r\n          type=\"text\"\r\n          onChange={event => {\r\n            this.handleChange(event);\r\n          }}\r\n        />\r\n\r\n        <br />\r\n        <br />\r\n        <button className=\"btn btn-primary m-1\" onClick={this.handleIncrement}>\r\n          Increment\r\n        </button>\r\n        <button className=\"btn btn-danger m-1\" onClick={this.handleDecrement}>\r\n          Decrement\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App1;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App1 from \"./components/App1\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App1 />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}